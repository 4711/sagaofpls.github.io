newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
newlines
}
lines <- c(
"---",
"layout: page",
"title: title",
"---",
"\n",
"# HOLA",
"Hola que tal",
"Este parrafo tiene una cita [@Sanchez2009]",
"\n",
"Este otro tambien [@WoldLyttkens1973a]",
"The End")
apply_jekyll_refs(lines)
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
apply_jekyll_refs <- function(file) {
lines <- readLines(file)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
apply_jekyll_refs <- function(file) {
lines <- readLines(file, warn = FALSE)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- unlist(lapply(refs, jekyll_ref))
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
apply_jekyll_refs <- function(file) {
lines <- readLines(file, warn = FALSE)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- lapply(refs, jekyll_ref))
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
apply_jekyll_refs <- function(file) {
lines <- readLines(file, warn = FALSE)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- lapply(refs, jekyll_ref)
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
apply_jekyll_refs <- function(lines) {
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- lapply(refs, jekyll_ref)
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
newlines
}
lines <- c(
"---",
"layout: page",
"title: title",
"---",
"\n",
"# HOLA",
"Hola que tal",
"Este parrafo tiene una cita [@Sanchez2009]",
"\n",
"Este otro tambien [@WoldLyttkens1973a]",
"The End")
apply_jekyll_refs(lines)
apply_jekyll_refs <- function(lines) {
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- unlist(lapply(refs, jekyll_ref))
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
newlines
}
lines <- c(
"---",
"layout: page",
"title: title",
"---",
"\n",
"# HOLA",
"Hola que tal",
"Este parrafo tiene una cita [@Sanchez2009]",
"\n",
"Este otro tambien [@WoldLyttkens1973a]",
"The End")
apply_jekyll_refs(lines)
newlines <- lines
i
lines
i=1
contains_citation(lines[i])
i=8
contains_citation(lines[i])
extract_refs(lines[i])
refs <- extract_refs(lines[i])
new_refs <- unlist(lapply(refs, jekyll_ref))
new_refs
seq_along(refs)
r=1
str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
lines[i]
lines
extract_refs(lines[i])
lines[i]
extract_refs <- function(str) {
unlist(str_extract_all(str, "\\[@(\\w+)\\]"))
}
rm(list = ls())
Â¬
extract_refs <- function(str) {
unlist(str_extract_all(str, "\\[@(\\w+)\\]"))
}
clean_ref <- function(ref) {
# removes brackets and 'at' symbol
str_replace_all(ref, "\\[|\\]|@", "")
}
extract_author <- function(ref) {
str_extract(ref, "[a-zA-Z]+")
}
extract_year <- function(ref) {
str_extract(ref, "\\d+.[a-z]{0,1}")
}
# reference
jekyll_ref <- function(cit) {
ref <- clean_ref(cit)
author <- extract_author(ref)
year <- extract_year(ref)
sprintf("([%s, %s](references.html/#%s))", author, year, ref)
}
# test it
jekyll_ref("[@Sanchez2009]")
new_refs <- unlist(lapply(refs, jekyll_ref))
y <- x
for (r in seq_along(refs)) {
y <- str_replace(y, "\\[@(\\w+)\\]", new_refs[r])
}
y
contains_citation <- function(x) {
cits <- str_match_all(x, "\\[@(\\w+)\\]")
length(unlist(cits)) > 0
}
apply_jekyll_refs <- function(file) {
lines <- readLines(file, warn = FALSE)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- lapply(refs, jekyll_ref)
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
tfile <- "/Users/Gaston/Desktop/citation.md"
apply_jekyll_refs(tfile)
x = c(2, 3, 4, 5, 6, 7, 8)
p = c(
0.042,
0.010,
0.021,
0.375,
0.188,
0.344,
0.021
)
mu = sum(x * p)
mu
sig2 = sum(p * (x - mu)^2)
sig2
sqrt(sig2)
(x - mu)^2
sig2 = sum(p * ((x - mu)^2))
sig2
sqrt(sig2)
x = c(0, 1000, 2000)
p = c(0.3, 0.6, 0.1)
mu = sum(x * p)
mu
sig2 = sum(p * ((x - mu)^2))
sig2
y = c(1000, 2000)
q = c(0.7, 0.3)
nu = sum(y * q)
nu
zig2 = sum(q * ((y - nu)^2))
zig2
n = 5
x = seq(0, 5)
p = 0.5
q = 0.5
choose(n, x) * (p^x) (q^(n-x))
x
for (i in seq_along(x)) {
choose(n, x[i]) * (p^x[i]) (q^(n-x[i]))
}
seq_along(x)
i=1
for (i in seq_along(x)) {
choose(n, x[i]) * (p^x[i]) * (q^(n-x[i]))
}
choose(n, x) * (p^x) * (q^(n-x))
1 - 0.03125
probs = choose(n, x) * (p^x) * (q^(n-x))
sum(probs[3:6])
probs
sum(probs[4:6])
n = 4
x = seq(0, 4)
p = 0.5
q = 0.5
probs = choose(n, x) * (p^x) * (q^(n-x))
probs
n = 20
x = seq(0, 3)
p = 0.05
probs = choose(n, x) * (p^x) * (q^(n-x))
probs
100 * probs
.95^20
q = 0.95
probs = choose(n, x) * (p^x) * (q^(n-x))
probs
105 * (1/8) + 155 * (1/8) + 149 * (1/8) + 195 * (1/8) +
290 * (1/8) + 357 * (1/8) + 246 * (1/8) + 178 * (1/8)
X = rnorm(100, 5, 2)
Y = rnorm(100, 12, 3)
Z = 1.5*X - 0.5*Y
var(Z)
(1.5^2)*4 + (0.5^2)*9
(1.5^2)*4 - (0.5^2)*9
var(X)
var(Y)
getwd()
setwd("/Users/Gaston/Documents/sagaofpls.github.io/")
#################################################################
# Generates files so jekyll can render ebook 'Saga of PLS'
# Author: Gaston Sanchez
# Refs: inspired by Hadley Wickham's 'build_book.R'
#       functions for his book Advanced R
#################################################################
# ===============================================================
# Helpers to generate md files with yaml header
# ===============================================================
# does destiny file need to be updated?
needs_update <- function(src, dest) {
if (!file.exists(dest)) return(TRUE)
src <- sprintf("chapters/%s", src)
mtime <- file.info(src, dest)$mtime
mtime[2] < mtime[1]
}
# splits words in '.md' file name
split_src_name <- function(string) {
unlist(strsplit(string, split = "-|\\."))
}
# extract chapter file name
get_chap_number <- function(full_number) {
gsub("^0", "", full_number)
}
# make yaml header of destiny file
make_yaml_header <- function(src) {
chap_num_title <- split_src_name(src)
# names
chap_num <- get_chap_number(chap_num_title[2])
chap_title <- chap_num_title[3]
# yaml header
##  outfile <- sprintf("ebook/%s.md", chap_num)
outfile <- sprintf("chapter%s.md", chap_num)
cat(file = outfile, "---", "\n", sep = '')
cat(file = outfile, "layout: page", "\n", sep = '', append = TRUE)
cat(file = outfile, sprintf("title: \"%s\"", chap_title),
"\n", sep = '', append = TRUE)
cat(file = outfile, "---", "\n\n", sep = '', append = TRUE)
print(sprintf("printing yaml header of chapter %s", chap_num))
}
next_chapter <- function(src) {
chap_num_title <- split_src_name(src)
# names
chap_num <- get_chap_number(chap_num_title[2])
outfile <- "chapters/next_chapter.md"
cat(file = outfile, '\n', '-----', '\n\n', sep = '')
cat(file = outfile, '<a class="continute" href="chapter', sep = '', append = TRUE)
cat(file = outfile, sprintf('%s.html">Next chapter</a>', sep = '', append = TRUE
cat(file = outfile, '<a class="continute">', sep = '', append = TRUE)
}
# appends a source .md file to its yaml-header .md file
append_mdfiles <- function(src, dest) {
system(sprintf("cat chapters/%s >> %s", src, dest))
sprintf("appending %s to %s", src, dest)
}
# rend chapter
render_chapter <- function(src) {
chap_num_title <- split_src_name(src)
chap_num <- get_chap_number(chap_num_title[2])
dest <- sprintf("chapter%s.md", chap_num)
dest <- file.path(dest)
if (!needs_update(src, dest)) return()
make_yaml_header(src)
append_mdfiles(src, dest)
}
# ===============================================================
# Helpers to generate citations for jekyll site
# ===============================================================
library(stringr)
contains_citation <- function(x) {
cits <- str_match_all(x, "\\[@(\\w+)\\]")
length(unlist(cits)) > 0
}
extract_refs <- function(str) {
unlist(str_extract_all(str, "\\[@(\\w+)\\]"))
}
clean_ref <- function(ref) {
# removes brackets and 'at' symbol
str_replace_all(ref, "\\[|\\]|@", "")
}
extract_author <- function(ref) {
str_extract(ref, "[a-zA-Z]+")
}
extract_year <- function(ref) {
str_extract(ref, "\\d+.[a-z]{0,1}")
}
# create link to references.html
create_reflink <- function(cit) {
ref <- clean_ref(cit)
author <- extract_author(ref)
year <- extract_year(ref)
sprintf("([%s, %s](references.html/#%s))", author, year, ref)
}
# converts original md citations into links for jekyll site
apply_jekyll_refs <- function(file) {
lines <- readLines(file, warn = FALSE)
newlines <- lines
for (i in seq_along(lines)) {
if (contains_citation(lines[i])) {
refs <- extract_refs(lines[i])
new_refs <- lapply(refs, create_reflink)
for (r in seq_along(refs)) {
newlines[i] <- str_replace(newlines[i], "\\[@(\\w+)\\]", new_refs[r])
}
}
}
writeLines(newlines, file)
}
# ===============================================================
# Helpers to generate index.md
# ===============================================================
capitalize <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
chapter_num_toc <- function(file_name) {
num <- split_src_name(file_name)[2]
gsub("^0", "", num)
}
make_index <- function(chap_list) {
# yaml header
outfile <- "index.md"
cat(file = outfile, "---", "\n", sep = '')
cat(file = outfile, "layout: home", "\n", sep = '', append = TRUE)
cat(file = outfile, "---", "\n\n", sep = '', append = TRUE)
cat(file = outfile, "# Contents", "\n\n", sep = '', append = TRUE)
for (i in seq_along(chap_list)) {
title_line <- readLines(sprintf("chapters/%s", chap_list[i]), n = 1)
title_line <- gsub("# ", "", title_line)
# append chapters
##chap_title <- capitalize(title_line)
chap_title <- title_line
chap_num <- chapter_num_toc(chap_list[i])
toc_chaps <- sprintf("- Chapter %s: [%s](chapter%s.html)",
chap_num,
chap_title,
chap_num)
cat(file = outfile, toc_chaps, "\n", sep = '', append = TRUE)
}
cat(file = outfile, "- [References](references.html)",
"\n\n", sep = '', append = TRUE)
print("index done")
}
# ===============================================================
# Helpers to generate nav.html
# ===============================================================
make_nav <- function(chap_list) {
outfile <- "_includes/nav.html"
cat(file = outfile, "<nav>", "\n", sep = '')
cat(file = outfile, "\t<ol>", "\n", sep = '', append = TRUE)
# append chapters
for (i in seq_along(chap_list)) {
title_line <- readLines(sprintf("chapters/%s", chap_list[i]), n = 1)
title_line <- gsub("# ", "", title_line)
# append chapters
##chap_title <- capitalize(title_line)
chap_title <- title_line
chap_title <- gsub(" ", "&nbsp;", chap_title)
chap_num <- chapter_num_toc(chap_list[i])
cat(file = outfile, "\t\t<li>", "\n", sep = '', append = TRUE)
cat(file = outfile, sprintf("\t\t\t<a href=\"chapter%s.html\" ", chap_num),
append = TRUE)
#cat(file = outfile, "class=\"{% if page.url contains 'chapter", append = TRUE)
#cat(file = outfile, sprintf("%s'", chap_num), append = TRUE)
cat(file = outfile, "class=\"{% if page.url == '/chapter", append = TRUE)
cat(file = outfile, sprintf("%s.html'", chap_num), append = TRUE)
cat(file = outfile, "%}active{% endif %}\">Chapter ", append = TRUE)
cat(file = outfile, sprintf("%s", chap_num), "\n", sep = '', append = TRUE)
cat(file = outfile, sprintf("\t\t\t<span>%s</span>", chap_title),
"\n", append = TRUE)
cat(file = outfile, "\t\t\t</a>", "\n", sep = '', append = TRUE)
cat(file = outfile, "\t\t</li>", "\n", sep = '', append = TRUE)
}
# append references
cat(file = outfile, "\t\t<li>", "\n", sep = '', append = TRUE)
cat(file = outfile, "\t\t\t<a href=\"references.html\" ", append = TRUE)
cat(file = outfile, "class=\"{% if page.url contains 'references'", append = TRUE)
cat(file = outfile, "%}active{% endif %}\">References", "\n", sep = '',
append = TRUE)
cat(file = outfile, "\t\t\t<span>References</span>", "\n", sep = '', append = TRUE)
cat(file = outfile, "\t\t\t</a>", "\n", sep = '', append = TRUE)
cat(file = outfile, "\t\t</li>", "\n", sep = '', append = TRUE)
# close ol and nav tags
cat(file = outfile, "\t</ol>", "\n", sep = '', append = TRUE)
cat(file = outfile, "</nav>", "\n", sep = '', append = TRUE)
}
dir("chapters/", pattern = "\\.md$")
chapters <- dir("chapters/", pattern = "\\.md$")
dummy <- function(src) {
chap_num_title <- split_src_name(src)
chap_num_title
}
dummy("chapter-01-introduction.md")
dummy <- function(src) {
chap_num_title <- split_src_name(src)
chap_num <- get_chap_number(chap_num_title[2])
chap_num
}
dummy("chapter-01-introduction.md")
next_chapter <- function(src) {
chap_num_title <- split_src_name(src)
# names
chap_num <- get_chap_number(chap_num_title[2])
outfile <- "chapters/next_chapter.md"
cat(file = outfile, '\n', '-----', '\n\n', sep = '')
cat(file = outfile, '<a class="continute" href="chapter', sep = '', append = TRUE)
cat(file = outfile, sprintf('%s.html">Next chapter</a>', chap_num),
sep = '', append = TRUE)
cat(file = outfile, '\n\n', sep = '', append = TRUE)
}
next_chapter("chapter-01-introduction.md")
link
NA != 1
if (NA != 1) print("jola")
dir("chapters/", pattern = "\\.md$")
dir("chapters/", pattern = "\\chapter*.md$")
dir("chapters/", pattern = "chapter*\\.md$")
dir("chapters/", pattern = "^chapter*\\.md$")
dir("chapters/", pattern = "\\.md$")
make_index(chapters)
